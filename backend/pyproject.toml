[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "face-aesthetic-backend"
version = "0.1.0"
description = "顔面美容分析AI バックエンドサービス"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Face Aesthetic Team", email = "team@example.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.12"
dependencies = [
    # Web Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "gunicorn>=23.0.0",
    
    # Data Validation & Serialization (最新プラクティス)
    "pydantic[email]>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # Database & Storage
    "supabase>=2.9.0",
    "asyncpg>=0.30.0",
    
    # AI/ML Dependencies
    "mediapipe>=0.10.18",
    "opencv-python>=4.10.0",
    "numpy>=1.24.0,<2.0.0",  # MediaPipe requires numpy<2
    "pillow>=10.0.0",
    "matplotlib>=3.7.0",
    "scikit-image>=0.21.0",
    
    # OpenAI
    "openai>=1.54.0",
    
    # HTTP & Async
    "httpx>=0.28.0",
    "aiofiles>=24.1.0",
    
    # LINE Bot (v3 API)
    "line-bot-sdk>=3.14.0",
    
    # Image Processing & Report Generation
    "reportlab>=4.2.5",
    "seaborn>=0.13.2",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.17",
    
    # Environment & Config
    "python-dotenv>=1.0.1",
    
    # Logging & Monitoring
    "loguru>=0.7.2",
    "prometheus-client>=0.21.0",
    
    # Utilities
    "python-slugify>=8.0.4",
    "typer>=0.15.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "httpx>=0.28.0",  # for testing
    
    # Linting & Formatting
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    
    # Development Tools
    "pre-commit>=4.0.0",
    "ipython>=8.30.0",
    "jupyter>=1.1.1",
]

[project.scripts]
face-aesthetic-server = "app.main:main"

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "pre-commit>=4.0.0",
    "ipython>=8.30.0",
]

# Ruff configuration (最新プラクティス)
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "A",   # flake8-builtins
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (black handles this)
    "B008",  # function call in default argument
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["T20"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = [
    "mediapipe.*",
    "cv2.*",
    "sklearn.*",
    "matplotlib.*",
    "reportlab.*",
    "seaborn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
