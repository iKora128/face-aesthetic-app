# Docker Compose file for Face Aesthetic AI
# 2025 Best Practices - No version needed for latest Docker Compose

services:
  # PostgreSQL Database (Local development only - Production uses Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: face-aesthetic-postgres
    environment:
      POSTGRES_DB: face_aesthetic_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - face-aesthetic-network
    profiles:
      - development

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: face-aesthetic-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - face-aesthetic-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: face-aesthetic-backend
    environment:
      # App settings
      APP_NAME: "Face Aesthetic AI Backend"
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      
      # Database (Use local postgres for development, Supabase for production)
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@postgres:5432/face_aesthetic_dev}
      
      # Supabase (Production)
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-500}
      
      # LINE Bot
      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN}
      LINE_CHANNEL_SECRET: ${LINE_CHANNEL_SECRET}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # CORS
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://localhost:3001", "https://face-aesthetic.vercel.app"]'
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # API settings
      API_PREFIX: "/api/v1"
      APP_URL: ${APP_URL:-http://localhost:8000}
    volumes:
      - ./backend/app:/app/app:ro
      - backend_uploads:/app/uploads
      - backend_reports:/app/reports
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - face-aesthetic-network
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: face-aesthetic-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_KEY}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - face-aesthetic-network
    restart: unless-stopped

  # Nginx (Reverse Proxy & Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: face-aesthetic-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - face-aesthetic-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_reports:
    driver: local
  nginx_logs:
    driver: local

networks:
  face-aesthetic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16